//@author: vux
//@help: template for geometry fx
//@tags: geometry
//@credits:

StructuredBuffer<float4x4> JointMatrices;
float4x4 Transform;

SamplerState linearSampler: IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

struct vs2gs
{
	float4 PosO: POSITION;
	float3 Normal: NORMAL;
	float2 UV: TEXCOORD0;
};

vs2gs VS(
	float4 PosO: POSITION,
	float3 NormO: NORMAL,
	float2 UV: TEXCOORD0,
	float4 BlendWeights: BLENDWEIGHT,
	float4 BlendIndices: BLENDINDICES,
	uint InstanceID: SV_VertexID)
{
	vs2gs Out;
	
	//---------- Skinning ----------
	float4 pos = 0;
	float3 norm = 0;

    for (int i = 0; i < 4; i++)
    {
        pos = pos + mul(PosO, JointMatrices[BlendIndices[i]]) * BlendWeights[i];
    	norm = norm + (mul(float4(NormO,0), JointMatrices[BlendIndices[i]]) * BlendWeights[i]).xyz;
    }
    //-------- End Skinning --------
	
	Out.PosO = mul(pos, Transform);
	Out.Normal = mul(norm, Transform);
	Out.UV = UV;
	
    return Out;
}


GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( vs_4_0, VS() ), "POSITION.xyz;NORMAL.xyz;TEXCOORD.xy", NULL,NULL,NULL,-1 );
//if the above does not work, try this line instead
//GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( vs_4_0, VS() ), "POSITION.xyz;NORMAL.xyz;TEXCOORD.xy" );

technique10 PassMesh
{
    pass PP2
    {
        SetVertexShader( CompileShader( vs_4_0, VS() ) );
        SetGeometryShader( StreamOutGS );
    }  
}